tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$mylog will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$mylog) # check if file has been uploaded
# read data
data <- read.csv(input$mylog$datapath, stringsAsFactors = FALSE)
names(data) <- "line"
# create variables
library(tidyr)
data <- separate(data, line, c("time", "app", "ab_testing", "version", "page_load_time", "click_time", "clicked_HTML_element_id", "session_ID"), " ")
data <- data[c(-2, -3)]
# format timestamp
library(stringr)
data$time <- str_replace(data$time, "T", " ")
data$time <- str_replace(data$time, fixed("+00:00"), "")
op <- options(digits.secs = 6)
data$time <- as.POSIXct(data$time)
return(data)
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$mylog, "_clean.csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
})
}
# Run the app ----
shinyApp(ui, server)
library(shiny)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("mylog", "Upload your mylog.txt file",
accept = c("text/plain",
".txt")),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$mylog will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$mylog) # check if file has been uploaded
# read data
data <- read.csv(input$mylog$datapath, stringsAsFactors = FALSE)
names(data) <- "line"
# create variables
library(tidyr)
data <- separate(data, line, c("time", "app", "ab_testing", "version", "page_load_time", "click_time", "clicked_HTML_element_id", "session_ID"), " ")
data <- data[c(-2, -3)]
# format timestamp
library(stringr)
data$time <- str_replace(data$time, "T", " ")
data$time <- str_replace(data$time, fixed("+00:00"), "")
op <- options(digits.secs = 6)
data$time <- as.POSIXct(data$time)
return(data)
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$mylog, "_clean.csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = FALSE)
})
}
# Run the app ----
shinyApp(ui, server)
?str_sub
library(shiny)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("mylog", "Upload your mylog.txt file",
accept = c("text/plain",
".txt")),
# Button
downloadButton("downloadData", "Download your cleaned data!")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$mylog will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$mylog) # check if file has been uploaded
# read data
data <- read.csv(input$mylog$datapath, stringsAsFactors = FALSE)
names(data) <- "line"
# create variables
library(tidyr)
data <- separate(data, line, c("time", "app", "ab_testing", "version", "page_load_time", "click_time", "clicked_HTML_element_id", "session_ID"), " ")
data <- data[c(-2, -3)]
# format timestamp
library(stringr)
data$time <- str_replace(data$time, "T", " ")
data$time <- str_replace(data$time, fixed("+00:00"), "")
op <- options(digits.secs = 6)
data$time <- as.POSIXct(data$time)
return(data)
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(str_replace(input$my_log, ".txt", ""), "_clean.csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = FALSE)
})
}
# Run the app ----
shinyApp(ui, server)
str_replace()
?str_replace
runApp('Documents/semester VII/CS1300 TA/txt-to-csv-app')
runApp('Documents/semester VII/CS1300 TA/txt-to-csv-app')
library(shiny)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("mylog", "Upload your mylog.txt file",
accept = c("text/plain",
".txt")),
# Button
downloadButton("downloadData", "Download your cleaned data!")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$mylog will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$mylog) # check if file has been uploaded
# read data
data <- read.csv(input$mylog$datapath, stringsAsFactors = FALSE)
names(data) <- "line"
# create variables
library(tidyr)
data <- separate(data, line, c("time", "app", "ab_testing", "version", "page_load_time", "click_time", "clicked_HTML_element_id", "session_ID"), " ")
data <- data[c(-2, -3)]
# format timestamp
library(stringr)
data$time <- str_replace(data$time, "T", " ")
data$time <- str_replace(data$time, fixed("+00:00"), "")
op <- options(digits.secs = 6)
data$time <- as.POSIXct(data$time)
return(data)
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(str_replace(input$my_log, "\.txt", ""), "_clean.csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = FALSE)
})
}
# Run the app ----
shinyApp(ui, server)
str_replace(input$my_log, "txt", "")
library(shiny)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("mylog", "Upload your mylog.txt file",
accept = c("text/plain",
".txt")),
# Button
downloadButton("downloadData", "Download your cleaned data!")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$mylog will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$mylog) # check if file has been uploaded
# read data
data <- read.csv(input$mylog$datapath, stringsAsFactors = FALSE)
names(data) <- "line"
# create variables
library(tidyr)
data <- separate(data, line, c("time", "app", "ab_testing", "version", "page_load_time", "click_time", "clicked_HTML_element_id", "session_ID"), " ")
data <- data[c(-2, -3)]
# format timestamp
library(stringr)
data$time <- str_replace(data$time, "T", " ")
data$time <- str_replace(data$time, fixed("+00:00"), "")
op <- options(digits.secs = 6)
data$time <- as.POSIXct(data$time)
return(data)
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(str_replace(input$my_log, "txt", ""), "_clean.csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = FALSE)
})
}
# Run the app ----
shinyApp(ui, server)
?str_trunc
?substr
library(shiny)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("mylog", "Upload your mylog.txt file",
accept = c("text/plain",
".txt")),
# Button
downloadButton("downloadData", "Download your cleaned data!")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$mylog will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$mylog) # check if file has been uploaded
# read data
data <- read.csv(input$mylog$datapath, stringsAsFactors = FALSE)
names(data) <- "line"
# create variables
library(tidyr)
data <- separate(data, line, c("time", "app", "ab_testing", "version", "page_load_time", "click_time", "clicked_HTML_element_id", "session_ID"), " ")
data <- data[c(-2, -3)]
# format timestamp
library(stringr)
data$time <- str_replace(data$time, "T", " ")
data$time <- str_replace(data$time, fixed("+00:00"), "")
op <- options(digits.secs = 6)
data$time <- as.POSIXct(data$time)
return(data)
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
name <- substr(input$my_log, 1, nchar(input$my_log)-4)
paste(name, "_clean.csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = FALSE)
})
}
# Run the app ----
shinyApp(ui, server)
library(shiny)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("Uploading Files"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("mylog", "Upload your mylog.txt file",
accept = c("text/plain",
".txt")),
# Button
downloadButton("downloadData", "Download your cleaned data!")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$mylog will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$mylog) # check if file has been uploaded
# read data
data <- read.csv(input$mylog$datapath, stringsAsFactors = FALSE)
names(data) <- "line"
# create variables
library(tidyr)
data <- separate(data, line, c("time", "app", "ab_testing", "version", "page_load_time", "click_time", "clicked_HTML_element_id", "session_ID"), " ")
data <- data[c(-2, -3)]
# format timestamp
library(stringr)
data$time <- str_replace(data$time, "T", " ")
data$time <- str_replace(data$time, fixed("+00:00"), "")
op <- options(digits.secs = 6)
data$time <- as.POSIXct(data$time)
return(data)
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
name <- substr(input$mylog, 1, nchar(input$mylog)-4)
paste(name, "_clean.csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = FALSE)
})
}
# Run the app ----
shinyApp(ui, server)
library(shiny)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("A/B Testing Data Cleaner"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("mylog", "Upload your mylog.txt file",
accept = c("text/plain",
".txt")),
# Button
downloadButton("downloadData", "Download your cleaned data!")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$mylog will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$mylog) # check if file has been uploaded
# read data
data <- read.csv(input$mylog$datapath, stringsAsFactors = FALSE)
names(data) <- "line"
# create variables
library(tidyr)
data <- separate(data, line, c("time", "app", "ab_testing", "version", "page_load_time", "click_time", "clicked_HTML_element_id", "session_ID"), " ")
data <- data[c(-2, -3)]
# format timestamp
library(stringr)
data$time <- str_replace(data$time, "T", " ")
data$time <- str_replace(data$time, fixed("+00:00"), "")
op <- options(digits.secs = 6)
data$time <- as.POSIXct(data$time)
return(data)
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
name <- substr(input$mylog, 1, nchar(input$mylog)-4)
paste(name, "_clean.csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = FALSE)
})
}
# Run the app ----
shinyApp(ui, server)
?titlePanel
library(shiny)
# Define UI for data upload app ----
ui <- fluidPage(
# App title ----
titlePanel("CS130(0) A/B Testing Data Cleaner"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Select a file ----
fileInput("mylog", "Upload your mylog.txt file",
accept = c("text/plain",
".txt")),
# Button
downloadButton("downloadData", "Download your cleaned data!")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
)
# Define server logic to read selected file ----
server <- function(input, output) {
output$contents <- renderTable({
# input$mylog will be NULL initially. After the user selects
# and uploads a file, head of that data file by default,
# or all rows if selected, will be shown.
req(input$mylog) # check if file has been uploaded
# read data
data <- read.csv(input$mylog$datapath, stringsAsFactors = FALSE)
names(data) <- "line"
# create variables
library(tidyr)
data <- separate(data, line, c("time", "app", "ab_testing", "version", "page_load_time", "click_time", "clicked_HTML_element_id", "session_ID"), " ")
data <- data[c(-2, -3)]
# format timestamp
library(stringr)
data$time <- str_replace(data$time, "T", " ")
data$time <- str_replace(data$time, fixed("+00:00"), "")
op <- options(digits.secs = 6)
data$time <- as.POSIXct(data$time)
return(data)
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
name <- substr(input$mylog, 1, nchar(input$mylog)-4)
paste(name, "_clean.csv", sep = "")
},
content = function(file) {
write.csv(data, file, row.names = FALSE)
})
}
# Run the app ----
shinyApp(ui, server)
runApp('Documents/semester VII/CS1300 TA/txt-to-csv-app')
shinyApp(ui, server)
library(shiny)
shinyApp(ui, server)
?req
?downloadHandler
runApp()
runApp()
runApp()
-1:-3
runApp()
runApp()
runApp()
runApp()
